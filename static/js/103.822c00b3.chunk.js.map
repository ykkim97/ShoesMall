{"version":3,"file":"static/js/103.822c00b3.chunk.js","mappings":"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","sources":["../node_modules/react-bootstrap/esm/Table.js","webpack://pwa-shoes-mall/./src/routes/Cart.module.css?5873","webpack://pwa-shoes-mall/./src/components/Payment.module.css?7729","components/Payment.js","routes/Cart.js","../node_modules/react-bootstrap/esm/Button.js"],"sourcesContent":["import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst Table = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  striped,\n  bordered,\n  borderless,\n  hover,\n  size,\n  variant,\n  responsive,\n  ...props\n}, ref) => {\n  const decoratedBsPrefix = useBootstrapPrefix(bsPrefix, 'table');\n  const classes = classNames(className, decoratedBsPrefix, variant && `${decoratedBsPrefix}-${variant}`, size && `${decoratedBsPrefix}-${size}`, striped && `${decoratedBsPrefix}-striped`, bordered && `${decoratedBsPrefix}-bordered`, borderless && `${decoratedBsPrefix}-borderless`, hover && `${decoratedBsPrefix}-hover`);\n\n  const table = /*#__PURE__*/_jsx(\"table\", { ...props,\n    className: classes,\n    ref: ref\n  });\n\n  if (responsive) {\n    let responsiveClass = `${decoratedBsPrefix}-responsive`;\n\n    if (typeof responsive === 'string') {\n      responsiveClass = `${responsiveClass}-${responsive}`;\n    }\n\n    return /*#__PURE__*/_jsx(\"div\", {\n      className: responsiveClass,\n      children: table\n    });\n  }\n\n  return table;\n});\nexport default Table;","// extracted by mini-css-extract-plugin\nexport default {\"shoppingBasketDiv\":\"Cart_shoppingBasketDiv__5wSte\",\"shoppingBasket\":\"Cart_shoppingBasket__Zc4Py\",\"basketTable\":\"Cart_basketTable__PAcjf\",\"basketTableHead\":\"Cart_basketTableHead__Gjb-l\",\"basketTableBody\":\"Cart_basketTableBody__Biz8X\",\"quanChangeBtn\":\"Cart_quanChangeBtn__JqFBj\",\"shoppingBasketAlert\":\"Cart_shoppingBasketAlert__B5QSz\",\"totalAmount\":\"Cart_totalAmount__4NXZz\",\"payment\":\"Cart_payment__EegK3\",\"goPaymentBtn\":\"Cart_goPaymentBtn__fjmfD\",\"goBackBtn\":\"Cart_goBackBtn__lKR21\"};","// extracted by mini-css-extract-plugin\nexport default {\"payment-modal\":\"Payment_payment-modal__+7Zzw\",\"bg\":\"Payment_bg__YDuuN\",\"modalBox\":\"Payment_modalBox__OC0P6\",\"title\":\"Payment_title__mEs4l\",\"total\":\"Payment_total__54BnW\",\"payment-info\":\"Payment_payment-info__PgMaJ\",\"closeBtn\":\"Payment_closeBtn__pxXx0\"};","import React from \"react\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport styles from \"./Payment.module.css\";\r\n\r\nfunction Payment({onOpenModal, modalTotal}) {\r\n    return (\r\n        <div className={styles[\"payment-modal\"]}>\r\n            <div className={styles[\"bg\"]}></div>\r\n            <div className={styles[\"modalBox\"]}>\r\n                <h4 id={styles[\"title\"]}>결제 금액 <p id={styles[\"total\"]}> {modalTotal[modalTotal.length - 1]}</p>원</h4>\r\n                <hr />\r\n                <div id={styles[\"payment-info\"]}>\r\n                    <p>아래 입금 정보를 확인하신 후, 계좌로 송금해주세요.</p>\r\n                    <p>입금은행 : OO은행</p>\r\n                    <p>계좌번호 : 123123123123 </p>\r\n                    <p>예금주 : CAFESHOE</p>\r\n                    <p>입금액 : {modalTotal[modalTotal.length - 1]}원</p>\r\n                    <p>3일 이내로 입금하지 않을 경우 결제가 취소됩니다.</p>\r\n                    <Button className={styles[\"closeBtn\"]} onClick={onOpenModal}>확인</Button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Payment;","// 장바구니 Page\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport MainNavbar from \"../components/MainNavbar\";\r\nimport {Table,Button} from \"react-bootstrap\";\r\nimport styles from \"./Cart.module.css\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { getDatabase, onValue, ref, update } from \"firebase/database\";\r\nimport { getAuth } from \"firebase/auth\";\r\nimport Payment from \"../components/Payment\";\r\n\r\nfunction Cart({isLogged, setIsLogged}) {\r\n    let total = 0;\r\n    const [cartArray, setCartArray] = useState([]);\r\n    const [modalOn, setModalOn] = useState(false);\r\n    // 결제모달창의 입금액을 표시하기 위해 총 결제금액을 저장할 변수 modalTotal\r\n    let modalTotal = [];\r\n\r\n    const state = useSelector((state) => state.basketReducer);\r\n    const alertState = useSelector((state) => state.basketAlertReducer);\r\n    \r\n    const dispatch = useDispatch();\r\n    const navigate = useNavigate();\r\n\r\n    // cartArray에 DB에서 가져온 장바구니 데이터 저장하기\r\n    useEffect(() => {\r\n        if (isLogged) {\r\n            const database = getDatabase();\r\n            const auth = getAuth();\r\n            const userId = auth.currentUser.uid;\r\n            const cartRef = ref(database, `users/${userId}/cart`);\r\n\r\n            onValue(cartRef, (snapshot) => {\r\n                let cartFromDB = snapshot.val();\r\n                if (cartFromDB == null) cartFromDB = [];\r\n                setCartArray([...cartFromDB]);\r\n            })\r\n        }\r\n    }, []);\r\n\r\n    // Modal\r\n    const onOpenModal = () => {\r\n        setModalOn(!modalOn);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className={styles.shoppingBasketDiv}>\r\n\r\n                {/* Navbar */}\r\n                <MainNavbar isLogged={isLogged} setIsLogged={setIsLogged}/>\r\n\r\n                {/* \"장바구니\" 제목 */}\r\n                <h1 className={styles.shoppingBasket}>장바구니</h1>\r\n\r\n                {/* 장바구니 목록 테이블 */}\r\n                <Table className={styles.basketTable} striped bordered hover>\r\n                    <thead className={styles.basketTableHead}>\r\n                        <tr>\r\n                            <th>상품 ID</th>\r\n                            <th>상품명</th>\r\n                            <th>수량</th>\r\n                            <th>단가</th>\r\n                            <th>총 합</th>\r\n                            <th>변경</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody className={styles.basketTableBody}>\r\n                        {(isLogged ? cartArray : state).map((item, idx) => {\r\n                            return (\r\n                                <tr key={idx}>\r\n                                    <td>{item.id}</td> \r\n                                    <td>{item.name}</td>\r\n                                    <td>{item.quan}</td>\r\n                                    <td>{item.price}</td>\r\n                                    <td>\r\n                                        {item.price * item.quan}\r\n                                    </td>\r\n                                    <td className={styles.quanChangeBtn}>\r\n                                        <button \r\n                                            onClick={() => {\r\n                                                if (isLogged) {\r\n                                                    const database = getDatabase();\r\n                                                    const auth = getAuth();\r\n                                                    const userId = auth.currentUser.uid;\r\n                                                    item.quan++;\r\n                                                    update(ref(database, `users/` + userId), {\r\n                                                        cart: cartArray,\r\n                                                    })\r\n                                                } else {\r\n                                                    dispatch({type : \"수량증가\", id : item.id, price : item.price})\r\n                                                }\r\n                                                \r\n                                            }\r\n                                        }>+</button>\r\n                                        <button \r\n                                            onClick={() => {\r\n                                                if (isLogged) {\r\n                                                    const database = getDatabase();\r\n                                                    const auth = getAuth();\r\n                                                    const userId = auth.currentUser.uid;\r\n                                                    if (item.quan > 1) item.quan--;\r\n                                                    update(ref(database, `users/` + userId), {\r\n                                                        cart: cartArray,\r\n                                                    })\r\n                                                } else {\r\n                                                    if (item.quan > 1) dispatch({type : \"수량감소\", id : item.id});\r\n                                                }\r\n                                            }\r\n                                        }>-</button>\r\n                                        <button \r\n                                            onClick={() => {\r\n                                                if (isLogged) {\r\n                                                    const database = getDatabase();\r\n                                                    const auth = getAuth();\r\n                                                    const userId = auth.currentUser.uid;\r\n                                                    \r\n                                                    let deleteFound = cartArray.findIndex((items) => items.id === item.id);\r\n                                                    cartArray.splice(deleteFound, 1);\r\n\r\n                                                    update(ref(database, `users/` + userId), {\r\n                                                        cart: cartArray,\r\n                                                    })\r\n                                                } else {\r\n                                                    dispatch({type : \"항목삭제\", id : item.id});\r\n                                                }\r\n                                                alert('상품이 삭제되었습니다.')\r\n                                            }\r\n                                        }>X</button>\r\n                                    </td>\r\n                                </tr>\r\n                            )\r\n                        })}\r\n                    </tbody>\r\n                </Table>\r\n\r\n                {/* 신규고객 첫 구매시 30%할인 광고 */}\r\n                {\r\n                    alertState === true ? \r\n                    (<div className={styles.shoppingBasketAlert}>\r\n                        <p>신규 고객 첫 구매 시 30% 할인! </p>\r\n                        <button onClick={() => {\r\n                            dispatch({type : \"닫기\"})\r\n                        }}>닫기</button>\r\n                    </div>) : null\r\n                }\r\n\r\n                \r\n                {/* 총 결제 금액 보여주기 */}\r\n                <div className={styles.totalAmount}>\r\n                    <p>총 결제 금액 : \r\n                        {(isLogged ? cartArray : state).map(item => {\r\n                            total += (item.price * item.quan);\r\n                            modalTotal.push(total);\r\n                            return total;\r\n                        })[(isLogged ? cartArray : state).length - 1]} 원\r\n                    </p>\r\n                </div>\r\n\r\n                {/* 결제하기, 뒤로가기 버튼 */}\r\n                <div className={styles.payment}>\r\n                    <Button className={styles.goPaymentBtn} onClick={onOpenModal}>결제하기</Button>\r\n                    {modalOn ? \r\n                        <Payment \r\n                            onOpenModal={onOpenModal}\r\n                            modalTotal={modalTotal}\r\n                        /> : ''\r\n                    }\r\n                    <Button className={styles.goBackBtn} onClick={() => {navigate(-1)}}>뒤로가기</Button>\r\n                </div>\r\n            </div>\r\n\r\n            {/* <Footer /> */}\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Cart;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useButtonProps } from '@restart/ui/Button';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst defaultProps = {\n  variant: 'primary',\n  active: false,\n  disabled: false\n};\nconst Button = /*#__PURE__*/React.forwardRef(({\n  as,\n  bsPrefix,\n  variant,\n  size,\n  active,\n  className,\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'btn');\n  const [buttonProps, {\n    tagName\n  }] = useButtonProps({\n    tagName: as,\n    ...props\n  });\n  const Component = tagName;\n  return /*#__PURE__*/_jsx(Component, { ...buttonProps,\n    ...props,\n    ref: ref,\n    className: classNames(className, prefix, active && 'active', variant && `${prefix}-${variant}`, size && `${prefix}-${size}`, props.href && props.disabled && 'disabled')\n  });\n});\nButton.displayName = 'Button';\nButton.defaultProps = defaultProps;\nexport default Button;"],"names":["React","ref","bsPrefix","className","striped","bordered","borderless","hover","size","variant","responsive","props","decoratedBsPrefix","useBootstrapPrefix","classes","classNames","table","_jsx","responsiveClass","children","onOpenModal","modalTotal","styles","id","length","Button","onClick","isLogged","setIsLogged","total","useState","cartArray","setCartArray","modalOn","setModalOn","state","useSelector","basketReducer","alertState","basketAlertReducer","dispatch","useDispatch","navigate","useNavigate","useEffect","database","getDatabase","userId","getAuth","currentUser","uid","cartRef","onValue","snapshot","cartFromDB","val","MainNavbar","map","item","idx","name","quan","price","update","cart","type","deleteFound","findIndex","items","splice","alert","push","as","active","prefix","useButtonProps","tagName","buttonProps","Component","href","disabled","displayName","defaultProps"],"sourceRoot":""}